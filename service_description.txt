Демо проект с использованием litestar и приминением подходов чистой архитектруы.
Описание:
Сервис, позволяющий оформить заказ на товар или несколько товаров.
Предметная область:
1. есть товары
2. есть склады
3. есть заказы
Товар имеет название, описание, цену
Чтобы создать заказ, пользователь выбирает товары из каталога и указывает их количество для
заказа, после чего жмет кнопку "сформировать заказ".
При создании заказа должна производиться проверка, что товары в нужном количестве есть на складах.
В заказ добавляется указанное количество товара если товара достаточно на складах или максимально возможное количество товара.
Нельзя создать заказ без хотя бы одного товара.
Сумма заказа вычисляется как сумма стоимостей всех товров в заказе.
Примечания:
1. Это демонастрационный проект.
2. Подразумевается, что сервис авторизации вынесен отдельно. Реализовывать логику авторизации/аутентификации и ролевую модель не нужно.
3. Проект должен быть спроектирован строго следуя принципам чистой архитектуры.
4. В качестве базы данных используется postgresql в асинхронном режиме. В качестве ОРМ - sqlalchemy.
5. Проект должен быть контейниризирован средствами docker и docker-compose.
6. Инфраструктурыне зависимости, такие как nginx, postgresql, logstash, elasticsearch, kibana и прочие вынесены отдельно. Эти зависимости деплоятся отдельным docker-compose 
7. Вся функциональность должна быть покрыта юнит тестами и интеграционными тестами.
8. Для тестирования используется pytest.
9. Используется mypy.
10. В качестве линтера используется ruff.
11. В качестве менеджера проекта и менеджера пакетов используется uv.
12. Для миграций используется alembic. Миграции нумеруются порядковыми номерами.
13. Для мониторинга и анализа логов используется ELK стек. В docker-compose самого сервиса испольуется лишь filebeat.
14. Для сбора метрик и алертинга используется prometheus и grafana.
15. Для локального деплоя (во время разработки) и деплоя в production среде используются два разных docker-compose файла. Это справедливо как для самого сервиса так и для инфраструктуры.
16. Конфигурационные параметры беруться из .env файла. Параметры для локального развертывания беруться из .local.env файла.
17. В качестве ASGI сервера используется uvicorn.
18. Для рутинных операций описаны make команды в Makefile. (Или это реализовано посредством uv если это возможно)